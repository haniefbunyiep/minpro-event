// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid            String                @id @default(cuid())
  name           String
  email          String
  username       String
  password       String
  roleId         Int                   @default(3)
  referralCodeId Int
  pointId        Int
  userStatus     UserEmailVerification @default(UNVERIFY)

  point        User_Point    @relation(fields: [pointId], references: [id])
  role         Role          @relation(fields: [roleId], references: [id])
  referralCode Referall_Code @relation(fields: [referralCodeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Review       Review[]
  Transaction  Transaction[]
  Use_Referral Use_Referral[]
  User_Voucher User_Voucher[]

  @@map("users")
}

enum UserEmailVerification {
  UNVERIFY
  VERIFIED
}

model User_Point {
  id       Int      @id @default(autoincrement())
  point    Int      @default(0)
  expireAt DateTime @db.Date
  lastAdd  DateTime @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("user_point")
}

model Event_Organizer {
  uid         String              @id @default(cuid())
  name        String
  phoneNumber String?
  email       String
  password    String
  roleId      Int                 @default(2)
  status      EOEmailVerification @default(UNVERIFY)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  role  Role    @relation(fields: [roleId], references: [id])
  Event Event[]

  @@map("event_organizers")
}

enum EOEmailVerification {
  VERIFIED
  UNVERIFY
}

model Referall_Code {
  id           Int    @id @default(autoincrement())
  referallCode String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User         User[]
  Use_Referral Use_Referral[]

  @@map("referral_code")
}

model Use_Referral {
  id             Int    @id @default(autoincrement())
  referralCodeId Int
  useBy          String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  referralCode Referall_Code @relation(fields: [referralCodeId], references: [id])
  user         User          @relation(fields: [useBy], references: [uid])

  @@map("use_referral")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User            User[]
  Event_Organizer Event_Organizer[]

  @@map("roles")
}

model Event {
  id          Int      @id @default(autoincrement())
  eo          String
  name        String
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  time        DateTime @db.Timestamp()
  locationId  Int
  description String   @db.LongText
  categoryId  Int

  location       Location        @relation(fields: [locationId], references: [id])
  category       Category        @relation(fields: [categoryId], references: [id])
  eventOrganizer Event_Organizer @relation(fields: [eo], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Ticket Ticket[]

  EventImage EventImage?
  Promotion  Promotion[]
  Review     Review[]

  @@map("events")
}

model EventImage {
  id      Int    @id @default(autoincrement())
  url     String
  eventId Int    @unique
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_images")
}

model Location {
  id      Int    @id @default(autoincrement())
  address String
  city    String
  zip     String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Event Event[]

  @@map("event_location")
}

model Ticket {
  id       Int    @id @default(autoincrement())
  eventId  Int
  event    Event  @relation(fields: [eventId], references: [id])
  name     String
  price    Int
  quantity Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_tickets")
}

model Review {
  id       Int    @id @default(autoincrement())
  userId   String
  user     User   @relation(fields: [userId], references: [uid])
  rating   String
  feedback String
  eventId  Int
  event    Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_reviews")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  date       DateTime @db.Date
  time       DateTime @db.Time()
  userId     String
  user       User     @relation(fields: [userId], references: [uid])
  name       String
  ticketType String
  quantity   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model Promotion {
  id              Int    @id @default(autoincrement())
  codeVoucher     String
  eventId         Int
  event           Event  @relation(fields: [eventId], references: [id])
  discountVoucher Int
  stok            Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_promotions")
}

model User_Voucher {
  id                Int                 @id @default(autoincrement())
  userId            String
  voucherCode       String
  discountInPercent Int                 @default(10)
  expireAt          DateTime            @db.Date
  status            User_Voucher_Status @default(ACTIVE)

  user User @relation(fields: [userId], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_voucher")
}

enum User_Voucher_Status {
  EXPIRED
  ACTIVE
  USED
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Event Event[]

  @@map("event_categories")
}
