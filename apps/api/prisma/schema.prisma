// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid            String @id @default(cuid())
  name           String
  email          String
  username       String
  password       String
  roleId         Int    @default(2)
  referralCodeId Int
  point          Int    @default(0)

  role         Role          @relation(fields: [roleId], references: [id])
  referralCode Referall_Code @relation(fields: [referralCodeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Review       Review[]
  Promotion    Promotion[]
  Transaction  Transaction[]
  Use_Referral Use_Referral[]
  User_Voucher User_Voucher[]

  @@map("users")
}

model Referall_Code {
  id           Int    @id @default(autoincrement())
  referallCode String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User         User[]
  Use_Referral Use_Referral[]

  @@map("referral_code")
}

model Use_Referral {
  id             Int    @id @default(autoincrement())
  referralCodeId Int
  useBy          String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  referralCode Referall_Code @relation(fields: [referralCodeId], references: [id])
  user         User          @relation(fields: [useBy], references: [uid])

  @@map("use_referral")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("roles")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime @db.Date
  time        DateTime @db.Time()
  location    String
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Ticket  Ticket[]
  Voucher Voucher[]

  @@map("events")
}

model Ticket {
  id       Int    @id @default(autoincrement())
  eventId  Int
  event    Event  @relation(fields: [eventId], references: [id])
  name     String
  price    Int
  quantity Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Voucher Voucher[]

  @@map("tickets")
}

model Review {
  id       Int    @id @default(autoincrement())
  userId   String
  user     User   @relation(fields: [userId], references: [uid])
  rating   String
  feedback String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("reviews")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  date       DateTime @db.Date
  time       DateTime @db.Time()
  userId     String
  user       User     @relation(fields: [userId], references: [uid])
  name       String
  ticketType String
  quantity   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model Promotion {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [uid])
  voucherId Int
  voucher   Voucher @relation(fields: [voucherId], references: [id])
  discount  Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("promotions")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  eventId   Int
  event     Event    @relation(fields: [id], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  pieces    Int
  stok      Int
  limited   Int
  startDate DateTime @db.Date
  endDate   DateTime @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Promotion Promotion[]

  @@map("vouchers")
}

model User_Voucher {
  id                Int                 @id @default(autoincrement())
  userId            String
  voucherCode       String
  discountInPercent Int                 @default(10)
  expireAt          DateTime            @db.Date
  status            User_Voucher_Status @default(ACTIVE)

  user User @relation(fields: [userId], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_voucher")
}

enum User_Voucher_Status {
  EXPIRED
  ACTIVE
  USED
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  @@map("categories")
}
